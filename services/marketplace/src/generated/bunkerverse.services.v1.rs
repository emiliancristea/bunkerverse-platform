// This file is @generated by prost-build.
/// / Standard health check request
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthRequest {
    /// Optional: Request tracing ID
    #[prost(string, tag = "1")]
    pub trace_id: ::prost::alloc::string::String,
}
/// / Standard health check response
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    /// "OK", "DEGRADED", or "UNHEALTHY"
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    /// Service version string
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    /// Response timestamp (Unix seconds)
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
    /// Additional health details (optional)
    #[prost(map = "string, string", tag = "4")]
    pub details: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Market browsing messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMarketListingsRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<super::super::core::v1::PaginationProto>,
    /// Optional filters
    #[prost(message, optional, tag = "2")]
    pub filters: ::core::option::Option<MarketplaceFiltersProto>,
    /// Sort options
    #[prost(message, optional, tag = "3")]
    pub sort: ::core::option::Option<MarketplaceSortProto>,
    /// Request tracing ID
    #[prost(string, tag = "4")]
    pub trace_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMarketListingsResponse {
    #[prost(oneof = "get_market_listings_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<get_market_listings_response::Result>,
}
/// Nested message and enum types in `GetMarketListingsResponse`.
pub mod get_market_listings_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        Success(super::GetMarketListingsSuccess),
        #[prost(message, tag = "2")]
        Error(super::super::super::core::v1::ErrorResponseProto),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMarketListingsSuccess {
    #[prost(message, repeated, tag = "1")]
    pub listings: ::prost::alloc::vec::Vec<MarketListingProto>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<super::super::core::v1::PaginationProto>,
    /// Market summary statistics
    #[prost(message, optional, tag = "3")]
    pub market_stats: ::core::option::Option<MarketStatsProto>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarketListingProto {
    /// Unique listing identifier
    #[prost(string, tag = "1")]
    pub listing_id: ::prost::alloc::string::String,
    /// NFT being sold
    #[prost(message, optional, tag = "2")]
    pub nft_details: ::core::option::Option<super::super::core::v1::NftDetailsProto>,
    /// Current NFT state
    #[prost(message, optional, tag = "3")]
    pub nft_state: ::core::option::Option<super::super::core::v1::NftMutableStateProto>,
    /// Seller's player UUID
    #[prost(string, tag = "4")]
    pub seller_player_id: ::prost::alloc::string::String,
    /// Seller's display name
    #[prost(string, tag = "5")]
    pub seller_bunker_tag: ::prost::alloc::string::String,
    /// Price in NTC wei
    #[prost(uint64, tag = "6")]
    pub listing_price_ntc_wei: u64,
    /// Sale or auction
    #[prost(enumeration = "super::super::core::v1::MarketStatusProto", tag = "7")]
    pub listing_type: i32,
    /// Listing creation timestamp
    #[prost(int64, tag = "8")]
    pub listing_created_at: i64,
    /// Listing expiration timestamp
    #[prost(int64, tag = "9")]
    pub listing_expires_at: i64,
    /// Number of views
    #[prost(uint32, tag = "10")]
    pub view_count: u32,
    /// Number of users who favorited
    #[prost(uint32, tag = "11")]
    pub favorite_count: u32,
    /// IDs of similar listings
    #[prost(string, repeated, tag = "12")]
    pub similar_listings: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetListingDetailsRequest {
    /// Listing identifier
    #[prost(string, tag = "1")]
    pub listing_id: ::prost::alloc::string::String,
    /// Player requesting details (for personalization)
    #[prost(string, tag = "2")]
    pub requesting_player_id: ::prost::alloc::string::String,
    /// Request tracing ID
    #[prost(string, tag = "3")]
    pub trace_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetListingDetailsResponse {
    #[prost(oneof = "get_listing_details_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<get_listing_details_response::Result>,
}
/// Nested message and enum types in `GetListingDetailsResponse`.
pub mod get_listing_details_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        Listing(super::MarketListingDetailProto),
        #[prost(message, tag = "2")]
        Error(super::super::super::core::v1::ErrorResponseProto),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarketListingDetailProto {
    /// Basic listing information
    #[prost(message, optional, tag = "1")]
    pub listing: ::core::option::Option<MarketListingProto>,
    /// Historical prices for this NFT
    #[prost(message, repeated, tag = "2")]
    pub price_history: ::prost::alloc::vec::Vec<PriceHistoryEntryProto>,
    /// Similar items currently listed
    #[prost(message, repeated, tag = "3")]
    pub similar_listings: ::prost::alloc::vec::Vec<MarketListingProto>,
    /// Market analytics for this item type
    #[prost(message, optional, tag = "4")]
    pub analytics: ::core::option::Option<MarketAnalyticsProto>,
    /// Whether requesting player favorited this
    #[prost(bool, tag = "5")]
    pub is_favorited_by_requester: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchMarketplaceRequest {
    /// Text search query
    #[prost(string, tag = "1")]
    pub search_query: ::prost::alloc::string::String,
    /// Search filters
    #[prost(message, optional, tag = "2")]
    pub filters: ::core::option::Option<MarketplaceFiltersProto>,
    /// Sort options
    #[prost(message, optional, tag = "3")]
    pub sort: ::core::option::Option<MarketplaceSortProto>,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::super::core::v1::PaginationProto>,
    /// Player performing search
    #[prost(string, tag = "5")]
    pub requesting_player_id: ::prost::alloc::string::String,
    /// Request tracing ID
    #[prost(string, tag = "6")]
    pub trace_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchMarketplaceResponse {
    #[prost(oneof = "search_marketplace_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<search_marketplace_response::Result>,
}
/// Nested message and enum types in `SearchMarketplaceResponse`.
pub mod search_marketplace_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        Success(super::SearchMarketplaceSuccess),
        #[prost(message, tag = "2")]
        Error(super::super::super::core::v1::ErrorResponseProto),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchMarketplaceSuccess {
    #[prost(message, repeated, tag = "1")]
    pub listings: ::prost::alloc::vec::Vec<MarketListingProto>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<super::super::core::v1::PaginationProto>,
    /// Alternative search terms
    #[prost(string, repeated, tag = "3")]
    pub search_suggestions: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Facet counts for filtering UI
    #[prost(map = "string, uint32", tag = "4")]
    pub facet_counts: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
}
/// NFT information messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNftDetailsRequest {
    /// NFT identifier
    #[prost(string, tag = "1")]
    pub nft_id: ::prost::alloc::string::String,
    /// Player requesting details
    #[prost(string, tag = "2")]
    pub requesting_player_id: ::prost::alloc::string::String,
    /// Include market history/analytics
    #[prost(bool, tag = "3")]
    pub include_market_data: bool,
    /// Request tracing ID
    #[prost(string, tag = "4")]
    pub trace_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNftDetailsResponse {
    #[prost(oneof = "get_nft_details_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<get_nft_details_response::Result>,
}
/// Nested message and enum types in `GetNftDetailsResponse`.
pub mod get_nft_details_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        Nft(super::NftDetailsResponseProto),
        #[prost(message, tag = "2")]
        Error(super::super::super::core::v1::ErrorResponseProto),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NftDetailsResponseProto {
    /// Immutable NFT properties
    #[prost(message, optional, tag = "1")]
    pub nft_details: ::core::option::Option<super::super::core::v1::NftDetailsProto>,
    /// Current mutable state
    #[prost(message, optional, tag = "2")]
    pub nft_state: ::core::option::Option<super::super::core::v1::NftMutableStateProto>,
    /// Historical sale prices (if requested)
    #[prost(message, repeated, tag = "3")]
    pub price_history: ::prost::alloc::vec::Vec<PriceHistoryEntryProto>,
    /// Market data for this item type (if requested)
    #[prost(message, optional, tag = "4")]
    pub market_analytics: ::core::option::Option<MarketAnalyticsProto>,
    /// Full IPFS metadata JSON
    #[prost(string, tag = "5")]
    pub metadata_json: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerOwnedNftsRequest {
    /// Player UUID
    #[prost(string, tag = "1")]
    pub player_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<super::super::core::v1::PaginationProto>,
    /// Optional filters
    #[prost(message, optional, tag = "3")]
    pub filters: ::core::option::Option<NftOwnershipFiltersProto>,
    /// Request tracing ID
    #[prost(string, tag = "4")]
    pub trace_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerOwnedNftsResponse {
    #[prost(oneof = "get_player_owned_nfts_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<get_player_owned_nfts_response::Result>,
}
/// Nested message and enum types in `GetPlayerOwnedNftsResponse`.
pub mod get_player_owned_nfts_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        Success(super::GetPlayerOwnedNftsSuccess),
        #[prost(message, tag = "2")]
        Error(super::super::super::core::v1::ErrorResponseProto),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerOwnedNftsSuccess {
    #[prost(message, repeated, tag = "1")]
    pub owned_nfts: ::prost::alloc::vec::Vec<PlayerOwnedNftProto>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<super::super::core::v1::PaginationProto>,
    /// Player's inventory statistics
    #[prost(message, optional, tag = "3")]
    pub inventory_stats: ::core::option::Option<InventoryStatsProto>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerOwnedNftProto {
    #[prost(message, optional, tag = "1")]
    pub nft_details: ::core::option::Option<super::super::core::v1::NftDetailsProto>,
    #[prost(message, optional, tag = "2")]
    pub nft_state: ::core::option::Option<super::super::core::v1::NftMutableStateProto>,
    /// When player acquired this NFT
    #[prost(int64, tag = "3")]
    pub acquired_at: i64,
    /// "purchase", "mission_reward", "mint", etc.
    #[prost(string, tag = "4")]
    pub acquisition_method: ::prost::alloc::string::String,
    /// Currently equipped on active robot
    #[prost(bool, tag = "5")]
    pub is_equipped: bool,
    /// Current estimated market value
    #[prost(uint64, tag = "6")]
    pub estimated_market_value_wei: u64,
}
/// Trading operation messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateListingRequest {
    /// Seller's player UUID (from JWT)
    #[prost(string, tag = "1")]
    pub player_id: ::prost::alloc::string::String,
    /// NFT to list for sale
    #[prost(string, tag = "2")]
    pub nft_id: ::prost::alloc::string::String,
    /// Listing price in NTC wei
    #[prost(uint64, tag = "3")]
    pub price_ntc_wei: u64,
    /// LISTED_FOR_SALE or LISTED_FOR_AUCTION
    #[prost(enumeration = "super::super::core::v1::MarketStatusProto", tag = "4")]
    pub listing_type: i32,
    /// When listing should expire
    #[prost(int64, tag = "5")]
    pub expiry_timestamp: i64,
    /// Request tracing ID
    #[prost(string, tag = "6")]
    pub trace_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateListingResponse {
    #[prost(oneof = "create_listing_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<create_listing_response::Result>,
}
/// Nested message and enum types in `CreateListingResponse`.
pub mod create_listing_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        Success(super::CreateListingSuccess),
        #[prost(message, tag = "2")]
        Error(super::super::super::core::v1::ErrorResponseProto),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateListingSuccess {
    /// Created listing identifier
    #[prost(string, tag = "1")]
    pub listing_id: ::prost::alloc::string::String,
    /// L3 transaction hash
    #[prost(string, tag = "2")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(enumeration = "super::super::core::v1::TransactionStatusProto", tag = "3")]
    pub transaction_status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelListingRequest {
    /// Seller's player UUID (from JWT)
    #[prost(string, tag = "1")]
    pub player_id: ::prost::alloc::string::String,
    /// Listing to cancel
    #[prost(string, tag = "2")]
    pub listing_id: ::prost::alloc::string::String,
    /// Request tracing ID
    #[prost(string, tag = "3")]
    pub trace_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelListingResponse {
    #[prost(oneof = "cancel_listing_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<cancel_listing_response::Result>,
}
/// Nested message and enum types in `CancelListingResponse`.
pub mod cancel_listing_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        Success(super::CancelListingSuccess),
        #[prost(message, tag = "2")]
        Error(super::super::super::core::v1::ErrorResponseProto),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CancelListingSuccess {
    /// Confirmation of cancellation
    #[prost(bool, tag = "1")]
    pub cancelled: bool,
    /// L3 transaction hash
    #[prost(string, tag = "2")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(enumeration = "super::super::core::v1::TransactionStatusProto", tag = "3")]
    pub transaction_status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTradeIntentRequest {
    /// Buyer's player UUID (from JWT)
    #[prost(string, tag = "1")]
    pub buyer_player_id: ::prost::alloc::string::String,
    /// Listing to purchase
    #[prost(string, tag = "2")]
    pub listing_id: ::prost::alloc::string::String,
    /// Price buyer is willing to pay
    #[prost(uint64, tag = "3")]
    pub offered_price_ntc_wei: u64,
    /// Maximum gas price for transaction
    #[prost(uint64, tag = "4")]
    pub max_gas_price: u64,
    /// Request tracing ID
    #[prost(string, tag = "5")]
    pub trace_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTradeIntentResponse {
    #[prost(oneof = "execute_trade_intent_response::Result", tags = "1, 2")]
    pub result: ::core::option::Option<execute_trade_intent_response::Result>,
}
/// Nested message and enum types in `ExecuteTradeIntentResponse`.
pub mod execute_trade_intent_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(message, tag = "1")]
        Success(super::ExecuteTradeIntentSuccess),
        #[prost(message, tag = "2")]
        Error(super::super::super::core::v1::ErrorResponseProto),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecuteTradeIntentSuccess {
    /// L3 purchase transaction hash
    #[prost(string, tag = "1")]
    pub transaction_hash: ::prost::alloc::string::String,
    #[prost(enumeration = "super::super::core::v1::TransactionStatusProto", tag = "2")]
    pub transaction_status: i32,
    /// Final price paid (including fees)
    #[prost(uint64, tag = "3")]
    pub final_price_paid_wei: u64,
    /// Fee paid to marketplace
    #[prost(uint64, tag = "4")]
    pub marketplace_fee_wei: u64,
}
/// Transaction management messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTransactionReceiptRequest {
    /// L3 transaction hash
    #[prost(string, tag = "1")]
    pub transaction_hash: ::prost::alloc::string::String,
    /// Request tracing ID
    #[prost(string, tag = "2")]
    pub trace_id: ::prost::alloc::string::String,
}
/// Filter and sort messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarketplaceFiltersProto {
    #[prost(enumeration = "super::super::core::v1::ItemTypeProto", repeated, tag = "1")]
    pub item_types: ::prost::alloc::vec::Vec<i32>,
    #[prost(
        enumeration = "super::super::core::v1::ItemRarityProto",
        repeated,
        tag = "2"
    )]
    pub rarities: ::prost::alloc::vec::Vec<i32>,
    #[prost(
        enumeration = "super::super::core::v1::BunkerClassProto",
        repeated,
        tag = "3"
    )]
    pub class_affinities: ::prost::alloc::vec::Vec<i32>,
    #[prost(
        enumeration = "super::super::core::v1::ClassAffiliationProto",
        repeated,
        tag = "4"
    )]
    pub affiliations: ::prost::alloc::vec::Vec<i32>,
    /// Minimum price filter
    #[prost(uint64, tag = "5")]
    pub min_price_ntc_wei: u64,
    /// Maximum price filter
    #[prost(uint64, tag = "6")]
    pub max_price_ntc_wei: u64,
    /// Filter by specific sellers
    #[prost(string, repeated, tag = "7")]
    pub seller_player_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Exclude requester's own listings
    #[prost(bool, tag = "8")]
    pub exclude_own_listings: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NftOwnershipFiltersProto {
    #[prost(enumeration = "super::super::core::v1::ItemTypeProto", repeated, tag = "1")]
    pub item_types: ::prost::alloc::vec::Vec<i32>,
    #[prost(
        enumeration = "super::super::core::v1::ItemRarityProto",
        repeated,
        tag = "2"
    )]
    pub rarities: ::prost::alloc::vec::Vec<i32>,
    #[prost(
        enumeration = "super::super::core::v1::ItemConditionProto",
        repeated,
        tag = "3"
    )]
    pub conditions: ::prost::alloc::vec::Vec<i32>,
    /// Only show equipped items
    #[prost(bool, tag = "4")]
    pub only_equipped: bool,
    /// Only show unequipped items
    #[prost(bool, tag = "5")]
    pub only_unequipped: bool,
    /// Only show items that can be sold
    #[prost(bool, tag = "6")]
    pub only_marketable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarketplaceSortProto {
    #[prost(enumeration = "marketplace_sort_proto::SortField", tag = "1")]
    pub sort_field: i32,
}
/// Nested message and enum types in `MarketplaceSortProto`.
pub mod marketplace_sort_proto {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SortField {
        Unspecified = 0,
        PriceAsc = 1,
        PriceDesc = 2,
        CreatedAsc = 3,
        CreatedDesc = 4,
        RarityAsc = 5,
        RarityDesc = 6,
        /// Based on views/favorites
        Popularity = 7,
    }
    impl SortField {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                SortField::Unspecified => "SORT_FIELD_UNSPECIFIED",
                SortField::PriceAsc => "PRICE_ASC",
                SortField::PriceDesc => "PRICE_DESC",
                SortField::CreatedAsc => "CREATED_ASC",
                SortField::CreatedDesc => "CREATED_DESC",
                SortField::RarityAsc => "RARITY_ASC",
                SortField::RarityDesc => "RARITY_DESC",
                SortField::Popularity => "POPULARITY",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SORT_FIELD_UNSPECIFIED" => Some(Self::Unspecified),
                "PRICE_ASC" => Some(Self::PriceAsc),
                "PRICE_DESC" => Some(Self::PriceDesc),
                "CREATED_ASC" => Some(Self::CreatedAsc),
                "CREATED_DESC" => Some(Self::CreatedDesc),
                "RARITY_ASC" => Some(Self::RarityAsc),
                "RARITY_DESC" => Some(Self::RarityDesc),
                "POPULARITY" => Some(Self::Popularity),
                _ => None,
            }
        }
    }
}
/// Analytics and statistics messages
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarketStatsProto {
    /// Total active listings
    #[prost(uint32, tag = "1")]
    pub total_listings: u32,
    /// 24h trading volume in NTC wei
    #[prost(uint64, tag = "2")]
    pub total_volume_24h_wei: u64,
    /// Average listing price
    #[prost(uint64, tag = "3")]
    pub average_price_wei: u64,
    /// Number of sales in 24h
    #[prost(uint32, tag = "4")]
    pub total_sales_24h: u32,
    /// Stats by item type
    #[prost(message, repeated, tag = "5")]
    pub item_type_stats: ::prost::alloc::vec::Vec<ItemTypeStatsProto>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemTypeStatsProto {
    #[prost(enumeration = "super::super::core::v1::ItemTypeProto", tag = "1")]
    pub item_type: i32,
    /// Active listings for this type
    #[prost(uint32, tag = "2")]
    pub active_listings: u32,
    /// Lowest current listing price
    #[prost(uint64, tag = "3")]
    pub floor_price_wei: u64,
    /// Average listing price
    #[prost(uint64, tag = "4")]
    pub average_price_wei: u64,
    /// 24h volume for this type
    #[prost(uint64, tag = "5")]
    pub volume_24h_wei: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PriceHistoryEntryProto {
    /// Sale price in NTC wei
    #[prost(uint64, tag = "1")]
    pub sale_price_wei: u64,
    /// When sale occurred
    #[prost(int64, tag = "2")]
    pub sale_timestamp: i64,
    /// Buyer (anonymized if privacy enabled)
    #[prost(string, tag = "3")]
    pub buyer_player_id: ::prost::alloc::string::String,
    /// Seller (anonymized if privacy enabled)
    #[prost(string, tag = "4")]
    pub seller_player_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarketAnalyticsProto {
    /// Current floor price
    #[prost(uint64, tag = "1")]
    pub floor_price_wei: u64,
    /// 7-day average price
    #[prost(uint64, tag = "2")]
    pub average_price_7d_wei: u64,
    /// 30-day average price
    #[prost(uint64, tag = "3")]
    pub average_price_30d_wei: u64,
    /// Sales in last 7 days
    #[prost(uint32, tag = "4")]
    pub total_sales_7d: u32,
    /// Sales in last 30 days
    #[prost(uint32, tag = "5")]
    pub total_sales_30d: u32,
    /// Recent sale history
    #[prost(message, repeated, tag = "6")]
    pub recent_sales: ::prost::alloc::vec::Vec<PriceHistoryEntryProto>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InventoryStatsProto {
    /// Total NFTs owned
    #[prost(uint32, tag = "1")]
    pub total_nfts: u32,
    /// Estimated total inventory value
    #[prost(uint64, tag = "2")]
    pub estimated_total_value_wei: u64,
    /// Count by item type
    #[prost(map = "string, uint32", tag = "3")]
    pub item_type_counts: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        u32,
    >,
    /// Count by rarity
    #[prost(map = "string, uint32", tag = "4")]
    pub rarity_counts: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
    /// Currently equipped items
    #[prost(uint32, tag = "5")]
    pub equipped_items: u32,
    /// Items that can be listed for sale
    #[prost(uint32, tag = "6")]
    pub marketable_items: u32,
}
/// Generated server implementations.
pub mod marketplace_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MarketplaceServiceServer.
    #[async_trait]
    pub trait MarketplaceService: Send + Sync + 'static {
        /// Market browsing and search
        async fn get_market_listings(
            &self,
            request: tonic::Request<super::GetMarketListingsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetMarketListingsResponse>,
            tonic::Status,
        >;
        async fn get_listing_details(
            &self,
            request: tonic::Request<super::GetListingDetailsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetListingDetailsResponse>,
            tonic::Status,
        >;
        async fn search_marketplace(
            &self,
            request: tonic::Request<super::SearchMarketplaceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SearchMarketplaceResponse>,
            tonic::Status,
        >;
        /// NFT information
        async fn get_nft_details(
            &self,
            request: tonic::Request<super::GetNftDetailsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetNftDetailsResponse>,
            tonic::Status,
        >;
        async fn get_player_owned_nfts(
            &self,
            request: tonic::Request<super::GetPlayerOwnedNftsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPlayerOwnedNftsResponse>,
            tonic::Status,
        >;
        /// Trading operations (submits L3 transactions)
        async fn create_listing(
            &self,
            request: tonic::Request<super::CreateListingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateListingResponse>,
            tonic::Status,
        >;
        async fn cancel_listing(
            &self,
            request: tonic::Request<super::CancelListingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CancelListingResponse>,
            tonic::Status,
        >;
        async fn execute_trade_intent(
            &self,
            request: tonic::Request<super::ExecuteTradeIntentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ExecuteTradeIntentResponse>,
            tonic::Status,
        >;
        /// Transaction management
        async fn submit_transaction(
            &self,
            request: tonic::Request<
                super::super::super::core::v1::TransactionRequestProto,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::core::v1::TransactionReceiptProto>,
            tonic::Status,
        >;
        async fn get_transaction_receipt(
            &self,
            request: tonic::Request<super::GetTransactionReceiptRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::core::v1::TransactionReceiptProto>,
            tonic::Status,
        >;
        /// Health check
        async fn health(
            &self,
            request: tonic::Request<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status>;
    }
    /// Marketplace Service - NFT trading and market operations
    #[derive(Debug)]
    pub struct MarketplaceServiceServer<T: MarketplaceService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: MarketplaceService> MarketplaceServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MarketplaceServiceServer<T>
    where
        T: MarketplaceService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/bunkerverse.services.v1.MarketplaceService/GetMarketListings" => {
                    #[allow(non_camel_case_types)]
                    struct GetMarketListingsSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<super::GetMarketListingsRequest>
                    for GetMarketListingsSvc<T> {
                        type Response = super::GetMarketListingsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetMarketListingsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::get_market_listings(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetMarketListingsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bunkerverse.services.v1.MarketplaceService/GetListingDetails" => {
                    #[allow(non_camel_case_types)]
                    struct GetListingDetailsSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<super::GetListingDetailsRequest>
                    for GetListingDetailsSvc<T> {
                        type Response = super::GetListingDetailsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetListingDetailsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::get_listing_details(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetListingDetailsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bunkerverse.services.v1.MarketplaceService/SearchMarketplace" => {
                    #[allow(non_camel_case_types)]
                    struct SearchMarketplaceSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<super::SearchMarketplaceRequest>
                    for SearchMarketplaceSvc<T> {
                        type Response = super::SearchMarketplaceResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchMarketplaceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::search_marketplace(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SearchMarketplaceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bunkerverse.services.v1.MarketplaceService/GetNftDetails" => {
                    #[allow(non_camel_case_types)]
                    struct GetNftDetailsSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<super::GetNftDetailsRequest>
                    for GetNftDetailsSvc<T> {
                        type Response = super::GetNftDetailsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetNftDetailsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::get_nft_details(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetNftDetailsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bunkerverse.services.v1.MarketplaceService/GetPlayerOwnedNfts" => {
                    #[allow(non_camel_case_types)]
                    struct GetPlayerOwnedNftsSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<super::GetPlayerOwnedNftsRequest>
                    for GetPlayerOwnedNftsSvc<T> {
                        type Response = super::GetPlayerOwnedNftsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPlayerOwnedNftsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::get_player_owned_nfts(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetPlayerOwnedNftsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bunkerverse.services.v1.MarketplaceService/CreateListing" => {
                    #[allow(non_camel_case_types)]
                    struct CreateListingSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<super::CreateListingRequest>
                    for CreateListingSvc<T> {
                        type Response = super::CreateListingResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateListingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::create_listing(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CreateListingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bunkerverse.services.v1.MarketplaceService/CancelListing" => {
                    #[allow(non_camel_case_types)]
                    struct CancelListingSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<super::CancelListingRequest>
                    for CancelListingSvc<T> {
                        type Response = super::CancelListingResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CancelListingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::cancel_listing(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = CancelListingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bunkerverse.services.v1.MarketplaceService/ExecuteTradeIntent" => {
                    #[allow(non_camel_case_types)]
                    struct ExecuteTradeIntentSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<super::ExecuteTradeIntentRequest>
                    for ExecuteTradeIntentSvc<T> {
                        type Response = super::ExecuteTradeIntentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ExecuteTradeIntentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::execute_trade_intent(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ExecuteTradeIntentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bunkerverse.services.v1.MarketplaceService/SubmitTransaction" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitTransactionSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<
                        super::super::super::core::v1::TransactionRequestProto,
                    > for SubmitTransactionSvc<T> {
                        type Response = super::super::super::core::v1::TransactionReceiptProto;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::core::v1::TransactionRequestProto,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::submit_transaction(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = SubmitTransactionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bunkerverse.services.v1.MarketplaceService/GetTransactionReceipt" => {
                    #[allow(non_camel_case_types)]
                    struct GetTransactionReceiptSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<super::GetTransactionReceiptRequest>
                    for GetTransactionReceiptSvc<T> {
                        type Response = super::super::super::core::v1::TransactionReceiptProto;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTransactionReceiptRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::get_transaction_receipt(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetTransactionReceiptSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/bunkerverse.services.v1.MarketplaceService/Health" => {
                    #[allow(non_camel_case_types)]
                    struct HealthSvc<T: MarketplaceService>(pub Arc<T>);
                    impl<
                        T: MarketplaceService,
                    > tonic::server::UnaryService<super::HealthRequest>
                    for HealthSvc<T> {
                        type Response = super::HealthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as MarketplaceService>::health(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HealthSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: MarketplaceService> Clone for MarketplaceServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: MarketplaceService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: MarketplaceService> tonic::server::NamedService
    for MarketplaceServiceServer<T> {
        const NAME: &'static str = "bunkerverse.services.v1.MarketplaceService";
    }
}
