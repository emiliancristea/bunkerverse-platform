version: '3.8'

# Bunkerverse Platform - Local Development Environment
# Complete smart stub ecosystem with security baseline
# Supports dual-mode configuration (MVE vs Full Crypto)

networks:
  bunkerverse-dev-network:
    name: bunkerverse-dev-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Persistent data volumes
  postgres_data:
  redis_data:
  elasticsearch_data:
  # Blockchain data
  arbitrum_data:
  ethereum_data:

services:
  #################################################
  # Core Platform Services (Smart Stubs)
  #################################################
  
  # Marketplace Service - NFT trading and market operations
  marketplace-service:
    build:
      context: .
      dockerfile: infra/dockerfiles/marketplace/Dockerfile
    container_name: marketplace-service
    hostname: marketplace-service
    networks:
      - bunkerverse-dev-network
    ports:
      - "8081:8081"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - ENABLE_CRYPTO=${ENABLE_CRYPTO:-false}
      - SHOW_CRYPTO=${SHOW_CRYPTO:-false}
      - SERVICE_PORT=8081
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bunkerverse}:${POSTGRES_PASSWORD:-dev123}@postgres:5432/${POSTGRES_DB:-bunkerverse}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev123}@redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Indexer Service - Blockchain state indexing
  indexer-service:
    build:
      context: .
      dockerfile: infra/dockerfiles/indexer/Dockerfile
    container_name: indexer-service
    hostname: indexer-service
    networks:
      - bunkerverse-dev-network
    ports:
      - "8082:8082"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - ENABLE_CRYPTO=${ENABLE_CRYPTO:-false}
      - SHOW_CRYPTO=${SHOW_CRYPTO:-false}
      - SERVICE_PORT=8082
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bunkerverse}:${POSTGRES_PASSWORD:-dev123}@postgres:5432/${POSTGRES_DB:-bunkerverse}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ARBITRUM_RPC_URL=http://arbitrum-sequencer:8547
      - ETHEREUM_RPC_URL=http://ethereum-node:8545
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      arbitrum-sequencer:
        condition: service_started
    restart: unless-stopped

  # Identity Service - Authentication and Authorization
  identity-service:
    build:
      context: .
      dockerfile: infra/dockerfiles/identity/Dockerfile
    container_name: identity-service
    hostname: identity-service
    networks:
      - bunkerverse-dev-network
    ports:
      - "8083:8083"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - ENABLE_CRYPTO=${ENABLE_CRYPTO:-false}
      - SHOW_CRYPTO=${SHOW_CRYPTO:-false}
      - SERVICE_PORT=8083
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bunkerverse}:${POSTGRES_PASSWORD:-dev123}@postgres:5432/${POSTGRES_DB:-bunkerverse}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev123}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-key-change-in-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # AI Data Service - AI/ML data processing
  ai-data-service:
    build:
      context: .
      dockerfile: infra/dockerfiles/ai_data/Dockerfile
    container_name: ai-data-service
    hostname: ai-data-service
    networks:
      - bunkerverse-dev-network
    ports:
      - "8084:8084"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - ENABLE_CRYPTO=${ENABLE_CRYPTO:-false}
      - SHOW_CRYPTO=${SHOW_CRYPTO:-false}
      - SERVICE_PORT=8084
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bunkerverse}:${POSTGRES_PASSWORD:-dev123}@postgres:5432/${POSTGRES_DB:-bunkerverse}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Account Service - Player account management  
  account-service:
    build:
      context: .
      dockerfile: infra/dockerfiles/account/Dockerfile
    container_name: account-service
    hostname: account-service
    networks:
      - bunkerverse-dev-network
    ports:
      - "8085:8085"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - ENABLE_CRYPTO=${ENABLE_CRYPTO:-false}
      - SHOW_CRYPTO=${SHOW_CRYPTO:-false}
      - SERVICE_PORT=8085
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bunkerverse}:${POSTGRES_PASSWORD:-dev123}@postgres:5432/${POSTGRES_DB:-bunkerverse}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Feedback Service - User feedback and ratings
  feedback-service:
    build:
      context: .
      dockerfile: infra/dockerfiles/feedback/Dockerfile
    container_name: feedback-service
    hostname: feedback-service
    networks:
      - bunkerverse-dev-network
    ports:
      - "8086:8086"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - ENABLE_CRYPTO=${ENABLE_CRYPTO:-false}
      - SHOW_CRYPTO=${SHOW_CRYPTO:-false}
      - SERVICE_PORT=8086
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bunkerverse}:${POSTGRES_PASSWORD:-dev123}@postgres:5432/${POSTGRES_DB:-bunkerverse}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Mission Service - Game missions and quests
  mission-service:
    build:
      context: .
      dockerfile: infra/dockerfiles/mission/Dockerfile
    container_name: mission-service
    hostname: mission-service
    networks:
      - bunkerverse-dev-network
    ports:
      - "8087:8087"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - ENABLE_CRYPTO=${ENABLE_CRYPTO:-false}
      - SHOW_CRYPTO=${SHOW_CRYPTO:-false}
      - SERVICE_PORT=8087
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bunkerverse}:${POSTGRES_PASSWORD:-dev123}@postgres:5432/${POSTGRES_DB:-bunkerverse}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Payment Service - Payment processing
  payment-service:
    build:
      context: .
      dockerfile: infra/dockerfiles/payment/Dockerfile
    container_name: payment-service
    hostname: payment-service
    networks:
      - bunkerverse-dev-network
    ports:
      - "8088:8088"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - ENABLE_CRYPTO=${ENABLE_CRYPTO:-false}
      - SHOW_CRYPTO=${SHOW_CRYPTO:-false}
      - SERVICE_PORT=8088
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bunkerverse}:${POSTGRES_PASSWORD:-dev123}@postgres:5432/${POSTGRES_DB:-bunkerverse}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-sk_test_}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Social Service - Social features and messaging
  social-service:
    build:
      context: .
      dockerfile: infra/dockerfiles/social/Dockerfile
    container_name: social-service
    hostname: social-service
    networks:
      - bunkerverse-dev-network
    ports:
      - "8089:8089"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - ENABLE_CRYPTO=${ENABLE_CRYPTO:-false}
      - SHOW_CRYPTO=${SHOW_CRYPTO:-false}
      - SERVICE_PORT=8089
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bunkerverse}:${POSTGRES_PASSWORD:-dev123}@postgres:5432/${POSTGRES_DB:-bunkerverse}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev123}@redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  #################################################
  # Blockchain Infrastructure
  #################################################

  # Local Ethereum Node (Anvil/Hardhat for development)
  ethereum-node:
    image: ghcr.io/foundry-rs/foundry:latest
    container_name: ethereum-node
    hostname: ethereum-node
    networks:
      - bunkerverse-dev-network
    ports:
      - "8545:8545"
    volumes:
      - ethereum_data:/root/.foundry
    command: >
      anvil
      --host 0.0.0.0
      --port 8545
      --chain-id 31337
      --block-time 2
      --accounts 10
      --balance 10000
      --gas-limit 30000000
      --gas-price 1000000000
    healthcheck:
      test: ["CMD-SHELL", "cast chain-id --rpc-url http://localhost:8545 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Arbitrum Orbit L2 Sequencer Network 
  arbitrum-sequencer:
    image: offchainlabs/nitro-node:v3.2.1-d81324d
    container_name: arbitrum-sequencer
    hostname: arbitrum-sequencer
    networks:
      - bunkerverse-dev-network
    ports:
      - "8547:8547"
      - "8548:8548"
    volumes:
      - arbitrum_data:/home/user/data
    environment:
      - L1_RPC_URL=http://ethereum-node:8545
      - L2_CHAIN_ID=412346
    command: >
      --parent-chain.connection.url=http://ethereum-node:8545
      --chain.id=412346
      --http.addr=0.0.0.0
      --http.port=8547
      --http.corsdomain="*"
      --http.vhosts="*"
      --http.api=net,web3,eth,debug
      --ws.addr=0.0.0.0
      --ws.port=8548
      --ws.origins="*"
      --ws.api=net,web3,eth,debug
      --node.sequencer=true
      --execution.forwarding-target=""
      --node.rpc.classic-redirect=""
      --node.data-availability.enable=false
      --init.dev-init=true
      --init.dev-init-address="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
      --init.dev-init-balance=1000000000000000000000
      --node.dangerous.no-l1-listener=true
      --parent-chain.wallet.only-create-key=true
    depends_on:
      ethereum-node:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8547 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  #################################################
  # Data Storage & Caching  
  #################################################

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    hostname: postgres
    networks:
      - bunkerverse-dev-network
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-bunkerverse}
      - POSTGRES_USER=${POSTGRES_USER:-bunkerverse}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-bunkerverse}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    networks:
      - bunkerverse-dev-network
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-dev123}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-dev123}
      --appendonly yes
      --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-dev123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Elasticsearch for search and indexing
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: elasticsearch
    hostname: elasticsearch
    networks:
      - bunkerverse-dev-network
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1

  #################################################
  # External Service Mocks
  #################################################

  # IPFS Gateway Mock - Smart Stub Implementation
  ipfs-mock:
    build:
      context: .
      dockerfile: infra/dockerfiles/ipfs-mock/Dockerfile
    container_name: ipfs-mock
    hostname: ipfs-mock
    networks:
      - bunkerverse-dev-network
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - IPFS_GATEWAY_PORT=8080
      - IPFS_SERVICE_NAME=IPFS Mock Gateway
    healthcheck:
      test: ["CMD", "/usr/local/bin/ipfs-mock", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Arweave Gateway Mock  
  arweave-mock:
    image: nginx:alpine
    container_name: arweave-mock
    hostname: arweave-mock
    networks:
      - bunkerverse-dev-network
    ports:
      - "1984:80" 
    volumes:
      - ./infra/mocks/arweave/html:/usr/share/nginx/html
    restart: unless-stopped