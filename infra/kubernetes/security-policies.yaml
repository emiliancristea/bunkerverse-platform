# Kubernetes Security Policies for Bunkerverse Platform
# Implements comprehensive security baseline with least privilege principles

apiVersion: v1
kind: Namespace
metadata:
  name: bunkerverse-services
  labels:
    name: bunkerverse-services
    security.bunkerverse.com/policy: "restricted"
  annotations:
    scheduler.alpha.kubernetes.io/node-selector: "workload-type=application"

---
# Default Deny All Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: bunkerverse-services
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress

---
# Allow DNS Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: bunkerverse-services
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# Marketplace Service Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: marketplace-service-policy
  namespace: bunkerverse-services
spec:
  podSelector:
    matchLabels:
      app: marketplace-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from ALB ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: aws-load-balancer-controller
    ports:
    - protocol: TCP
      port: 8081
  # Allow traffic from other services in the same namespace
  - from:
    - podSelector:
        matchLabels:
          security.bunkerverse.com/network: "internal"
    ports:
    - protocol: TCP
      port: 8081
  egress:
  # Allow traffic to databases
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: elasticsearch
    ports:
    - protocol: TCP
      port: 9200
  # Allow HTTPS outbound for external APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Identity Service Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: identity-service-policy
  namespace: bunkerverse-services
spec:
  podSelector:
    matchLabels:
      app: identity-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from ALB and internal services
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          security.bunkerverse.com/network: "internal"
    ports:
    - protocol: TCP
      port: 8083
  egress:
  # Database access
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # External OAuth providers
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Database Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: database-policy
  namespace: bunkerverse-services
spec:
  podSelector:
    matchLabels:
      app: postgresql
  policyTypes:
  - Ingress
  ingress:
  # Only allow connections from application services
  - from:
    - podSelector:
        matchLabels:
          security.bunkerverse.com/database-access: "allowed"
    ports:
    - protocol: TCP
      port: 5432

---
# Pod Security Standards - Restricted Profile
apiVersion: v1
kind: Pod
metadata:
  name: marketplace-service
  namespace: bunkerverse-services
  labels:
    app: marketplace-service
    security.bunkerverse.com/network: "internal"
    security.bunkerverse.com/database-access: "allowed"
spec:
  # Security Context - Pod Level
  securityContext:
    runAsNonRoot: true
    runAsUser: 65532
    runAsGroup: 65532
    fsGroup: 65532
    seccompProfile:
      type: RuntimeDefault
    supplementalGroups: []
  
  serviceAccountName: marketplace-service-sa
  
  containers:
  - name: marketplace-service
    image: your-ecr-repo/marketplace-service:latest
    
    # Security Context - Container Level
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 65532
      runAsGroup: 65532
      capabilities:
        drop:
        - ALL
      seccompProfile:
        type: RuntimeDefault
    
    # Resource Limits
    resources:
      requests:
        memory: "128Mi"
        cpu: "100m"
        ephemeral-storage: "1Gi"
      limits:
        memory: "512Mi"
        cpu: "500m"
        ephemeral-storage: "2Gi"
    
    # Health Checks
    livenessProbe:
      httpGet:
        path: /health
        port: 8081
        scheme: HTTP
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    
    readinessProbe:
      httpGet:
        path: /health
        port: 8081
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
    
    # Volume Mounts for writable directories
    volumeMounts:
    - name: tmp
      mountPath: /tmp
    - name: cache
      mountPath: /app/cache
    
    # Environment Variables
    env:
    - name: RUST_LOG
      value: "info"
    - name: SERVICE_PORT
      value: "8081"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: database-credentials
          key: connection-string
    - name: REDIS_URL
      valueFrom:
        secretKeyRef:
          name: redis-credentials
          key: connection-string
  
  # Volumes for writable filesystem
  volumes:
  - name: tmp
    emptyDir:
      sizeLimit: "100Mi"
  - name: cache
    emptyDir:
      sizeLimit: "500Mi"
  
  # DNS Policy
  dnsPolicy: ClusterFirst
  
  # Restart Policy
  restartPolicy: Always
  
  # Node Selection
  nodeSelector:
    workload-type: application
  
  # Pod Anti-Affinity for High Availability
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - marketplace-service
          topologyKey: kubernetes.io/hostname

---
# Service Account with Minimal Permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: marketplace-service-sa
  namespace: bunkerverse-services
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT-ID:role/marketplace-service-role
automountServiceAccountToken: false

---
# RBAC - Role for Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: bunkerverse-services
  name: marketplace-service-role
rules:
# Minimal permissions for service operation
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
  resourceNames: ["marketplace-service-config"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
  resourceNames: ["database-credentials", "redis-credentials"]

---
# RBAC - Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: marketplace-service-binding
  namespace: bunkerverse-services
subjects:
- kind: ServiceAccount
  name: marketplace-service-sa
  namespace: bunkerverse-services
roleRef:
  kind: Role
  name: marketplace-service-role
  apiGroup: rbac.authorization.k8s.io

---
# Priority Class for Service Pods
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: bunkerverse-service-priority
value: 1000
globalDefault: false
description: "Priority class for Bunkerverse service pods"

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: marketplace-service-pdb
  namespace: bunkerverse-services
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: marketplace-service

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: marketplace-service-hpa
  namespace: bunkerverse-services
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: marketplace-service
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60