name: Netchain Backend CI

on:
  push:
    branches: [ develop ]
    paths:
      - 'services/**'
      - 'libs/common-rust/**'
      - 'schemas/proto/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'rust-toolchain.toml'
      - '.github/workflows/netchain-backend-ci.yml'
  pull_request:
    branches: [ develop ]
    paths:
      - 'services/**'
      - 'libs/common-rust/**'
      - 'schemas/proto/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'rust-toolchain.toml'
      - '.github/workflows/netchain-backend-ci.yml'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode for validation'
        required: false
        default: 'false'
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  setup-environment:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      rust-version: ${{ steps.toolchain.outputs.rust-version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Read Rust toolchain version
        id: toolchain
        run: |
          RUST_VERSION=$(cat rust-toolchain.toml | grep channel | cut -d'"' -f2)
          echo "rust-version=$RUST_VERSION" >> $GITHUB_OUTPUT
          echo "Using Rust version: $RUST_VERSION"
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.toolchain.outputs.rust-version }}
          components: rustfmt, clippy
      
      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.1'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ needs.setup-environment.outputs.rust-version }}
          components: rustfmt, clippy
      
      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.1'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Restore Cargo cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check Rust formatting
        run: cargo fmt --all -- --check
      
      - name: Run Clippy lints
        run: |
          cargo clippy --all-targets --all-features -- \
            -D clippy::correctness \
            -D clippy::suspicious \
            -D clippy::complexity \
            -W clippy::perf \
            -W clippy::style \
            -A clippy::cargo-common-metadata \
            -A clippy::missing-errors-doc \
            -A clippy::missing-panics-doc \
            -A clippy::doc-markdown

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ needs.setup-environment.outputs.rust-version }}
      
      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.1'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Restore Cargo cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build all targets (release mode)
        run: cargo build --all-targets --all-features --release
      
      - name: Run unit and integration tests
        run: cargo test --all-targets --all-features --release

  security-scans:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ needs.setup-environment.outputs.rust-version }}
      
      - name: Install cargo-audit
        run: cargo install --locked cargo-audit --version 0.21.1
      
      - name: Install cargo-deny
        run: cargo install --locked cargo-deny --version 0.14.24
      
      - name: Run dependency vulnerability scan
        run: cargo audit --deny warnings --deny unmaintained --deny unsound --deny yanked
      
      - name: Run license compliance check
        run: cargo deny check license ban
      
      - name: Run dependency analysis
        run: cargo deny check advisories sources

  # Docker build and scan is handled by the container-publish workflow
  # This avoids duplicate Docker builds and image scanning

  status-check:
    name: All Checks Complete
    runs-on: ubuntu-latest
    needs: [lint-and-format, build-and-test, security-scans]
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ needs.lint-and-format.result }}" == "success" && \
                "${{ needs.build-and-test.result }}" == "success" && \
                "${{ needs.security-scans.result }}" == "success" ]]; then
            echo "All backend CI checks passed!"
            exit 0
          else
            echo "One or more backend CI checks failed!"
            exit 1
          fi
      
      # Send notification on failure for develop/main branches
      - name: Send failure notification
        if: failure() && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
        uses: actions/github-script@v7
        with:
          script: |
            const workflow_run = context.payload.workflow_run || context.runId;
            const failed_jobs = [];
            if ('${{ needs.lint-and-format.result }}' != 'success') failed_jobs.push('lint-and-format');
            if ('${{ needs.build-and-test.result }}' != 'success') failed_jobs.push('build-and-test');
            if ('${{ needs.security-scans.result }}' != 'success') failed_jobs.push('security-scans');
            
            // Create an issue for critical branch failures
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Backend CI Failed on ${context.ref}`,
              body: `## CI Pipeline Failure Alert\n\n**Branch**: ${context.ref}\n**Workflow**: Backend CI\n**Failed Jobs**: ${failed_jobs.join(', ')}\n**Run**: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}\n\n### Action Required\nPlease investigate and fix the failing CI checks immediately.`,
              labels: ['ci-failure', 'urgent', 'backend']
            });