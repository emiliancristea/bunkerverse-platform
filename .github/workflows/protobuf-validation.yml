name: Protobuf Validation v2

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'schemas/proto/**'
      - 'buf.yaml'
      - 'buf.gen.yaml'
      - 'buf.work.yaml'
      - '.github/workflows/protobuf-validation.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'schemas/proto/**'
      - 'buf.yaml'
      - 'buf.gen.yaml' 
      - 'buf.work.yaml'
      - '.github/workflows/protobuf-validation.yml'

jobs:
  proto-lint:
    name: Lint Protocol Buffers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for breaking change detection

      - name: Setup buf CLI
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Lint protobuf files
        run: buf lint  # Validate Protocol Buffer files for syntax and style

      - name: Check for breaking changes
        if: github.event_name == 'pull_request'
        run: buf breaking --against 'https://github.com/${{ github.repository }}.git#branch=develop'

  # Code generation disabled - requires additional plugin setup
  # proto-generate:
  #   name: Generate and Validate Code
  #   runs-on: ubuntu-latest
  #   needs: proto-lint
  #   steps:
  #     - name: Checkout code  
  #       uses: actions/checkout@v4
  #     - name: Setup buf CLI
  #       uses: bufbuild/buf-setup-action@v1
  #       with:
  #         github_token: ${{ github.token }}
  #     - name: Generate protobuf code
  #       run: buf generate

  schema-validation:
    name: Schema Validation & Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup buf CLI  
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Run comprehensive schema validation
        run: |
          echo "üîç Validating schema consistency..."
          
          # Check for required fields in critical types
          if ! grep -r "required.*player_id" schemas/proto/; then
            echo "‚ö†Ô∏è  Warning: player_id should be marked as required in critical operations"
          fi
          
          # Validate enum zero values
          find schemas/proto -name "*.proto" -exec grep -L "_UNSPECIFIED = 0" {} \; | while read file; do
            if grep -q "enum " "$file"; then
              echo "‚ùå Error: $file contains enums without _UNSPECIFIED = 0"
              exit 1
            fi
          done
          
          echo "‚úÖ Schema validation completed"

      - name: Security validation
        run: |
          echo "üîí Running security validation..."
          
          # Check for sensitive data patterns
          if grep -r -i "password\|secret\|key\|token" schemas/proto/ --include="*.proto"; then
            echo "‚ö†Ô∏è  Warning: Potential sensitive data found in proto files"
            echo "Ensure sensitive fields are properly marked and handled"
          fi
          
          # Validate field numbering for wire format stability
          python3 << 'EOF'
          import os
          import re
          
          def check_field_numbers(file_path):
              with open(file_path, 'r') as f:
                  content = f.read()
              
              # Find all messages and check field numbers within each message
              message_pattern = r'message\s+(\w+)\s*\{([^}]*)\}'
              messages = re.findall(message_pattern, content, re.DOTALL)
              
              for message_name, message_content in messages:
                  # Find field declarations within this message
                  field_pattern = r'^\s*(?:repeated\s+|optional\s+|required\s+)?(\w+)\s+(\w+)\s+=\s+(\d+);'
                  fields = re.findall(field_pattern, message_content, re.MULTILINE)
                  
                  numbers = [int(num) for _, _, num in fields]
                  # Check for duplicates within this message
                  seen = set()
                  duplicates = []
                  for num in numbers:
                      if num in seen:
                          duplicates.append(num)
                      seen.add(num)
                  
                  if duplicates:
                      print(f"‚ùå Error: {file_path} message '{message_name}' has duplicate field numbers: {duplicates}")
                      return False
                  
                  # Check for invalid field numbers
                  for num in numbers:
                      if num < 1 or num > 536870911 or (19000 <= num <= 19999):
                          print(f"‚ùå Error: {file_path} message '{message_name}' has invalid field number: {num}")
                          return False
              return True
          
          all_valid = True
          for root, dirs, files in os.walk('schemas/proto'):
              for file in files:
                  if file.endswith('.proto'):
                      if not check_field_numbers(os.path.join(root, file)):
                          all_valid = False
          
          if not all_valid:
              exit(1)
          print("‚úÖ Field numbering validation passed")
          EOF
          
          echo "‚úÖ Security validation completed"

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [proto-lint, schema-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup buf CLI
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}

      - name: Generate documentation
        run: |
          chmod +x scripts/generate-docs.sh
          ./scripts/generate-docs.sh

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload documentation
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs/generated

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create deployment summary
        run: |
          echo "## üìö Documentation Deployed" >> $GITHUB_STEP_SUMMARY
          echo "Documentation has been successfully deployed to GitHub Pages." >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v0.3.0" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY