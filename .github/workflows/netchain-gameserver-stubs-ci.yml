name: Netchain Game Server Stubs CI

on:
  push:
    branches: [ develop ]
    paths:
      - 'games/**'
      - '.github/workflows/netchain-gameserver-stubs-ci.yml'
  pull_request:
    branches: [ develop ]
    paths:
      - 'games/**'
      - '.github/workflows/netchain-gameserver-stubs-ci.yml'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode for validation'
        required: false
        default: 'false'
        type: boolean

env:
  # UE5 and C++ build configuration
  UE_VERSION: '5.4'
  BUILD_CONFIGURATION: 'Development'

jobs:
  setup-environment:
    name: Setup C++ Environment
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup C++ environment (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build
          sudo apt-get install -y gcc-11 g++-11
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
      
      - name: Setup C++ environment (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake ninja
          echo "Using MSVC from GitHub Actions runner"
      
      - name: Cache CMake build directory
        uses: actions/cache@v4
        with:
          path: |
            games/**/build
            games/**/.cmake
          key: ${{ runner.os }}-cmake-gameserver-${{ hashFiles('games/**/CMakeLists.txt') }}

  lint-cpp:
    name: C++ Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install static analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck clang-tidy clang-format build-essential
      
      - name: Run clang-format check
        run: |
          if [ -d "games/" ]; then
            find games/ -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | \
            xargs clang-format --dry-run --Werror --style=file
          else
            echo "Games directory not found, skipping format check"
          fi
      
      - name: Run cppcheck static analysis
        run: |
          if [ -d "games/" ]; then
            cppcheck --enable=all \
              --error-exitcode=1 \
              --std=c++17 \
              --suppress=missingIncludeSystem \
              --suppress=unusedFunction \
              --suppress=unmatchedSuppression \
              --inline-suppr \
              --quiet \
              games/
          else
            echo "Games directory not found, skipping cppcheck"
          fi
      
      - name: Run clang-tidy analysis (if source files exist)
        run: |
          if [ -d "games/" ] && find games/ -name "*.cpp" -o -name "*.cc" | grep -q .; then
            find games/ -name "*.cpp" -o -name "*.cc" | \
            xargs clang-tidy \
              --checks='-*,readability-*,performance-*,bugprone-*,clang-analyzer-*' \
              --warnings-as-errors='*' \
              --quiet || echo "clang-tidy found issues, but continuing..."
          else
            echo "No C++ source files found in games directory, skipping clang-tidy"
          fi

  build-game-server-stubs:
    name: Build Game Server Stubs
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    needs: setup-environment
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup C++ environment (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build
          sudo apt-get install -y gcc-11 g++-11
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100
          echo "CC=gcc-11" >> $GITHUB_ENV
          echo "CXX=g++-11" >> $GITHUB_ENV
      
      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2
      
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install cmake ninja
      
      - name: Restore CMake cache
        uses: actions/cache/restore@v4
        with:
          path: |
            games/**/build
            games/**/.cmake
          key: ${{ runner.os }}-cmake-gameserver-${{ hashFiles('games/**/CMakeLists.txt') }}
      
      - name: Create games directory if missing
        run: |
          if [ ! -d "games/" ]; then
            mkdir -p games/ue5-server-stubs
            echo "# Game Server Stubs" > games/ue5-server-stubs/README.md
            echo "This directory will contain UE5 game server stubs for post-MVE development."
            echo "For Phase 0, this serves as a placeholder for future C++ UE5 integration."
          fi
        shell: bash
      
      - name: Build C++ stubs (if CMakeLists.txt exists)
        run: |
          if find games/ -name "CMakeLists.txt" | grep -q .; then
            for cmake_file in $(find games/ -name "CMakeLists.txt"); do
              stub_dir=$(dirname "$cmake_file")
              echo "Building stubs in $stub_dir"
              
              cd "$stub_dir"
              mkdir -p build
              cd build
              
              if [ "${{ matrix.os }}" = "windows-latest" ]; then
                cmake .. -G "Visual Studio 17 2022" -A x64
                cmake --build . --config Release
              else
                cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
                cmake --build .
              fi
              
              cd - > /dev/null
            done
          else
            echo "No CMakeLists.txt found - creating minimal stub build structure"
            mkdir -p games/ue5-server-stubs/build
            echo "Placeholder build completed for game server stubs directory"
          fi
        shell: bash
      
      - name: Upload game server stub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gameserver-stubs-${{ matrix.os }}
          path: |
            games/**/build/
            games/**/bin/
            games/**/lib/
          if-no-files-found: ignore

  security-scan-cpp:
    name: Security Scan C++ Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install security scanning tools
        run: |
          # Install basic security scanning tools for C++
          sudo apt-get update
          sudo apt-get install -y cppcheck
      
      - name: Run security-focused cppcheck scan
        run: |
          if [ -d "games/" ]; then
            cppcheck --enable=all \
              --error-exitcode=0 \
              --xml \
              --xml-version=2 \
              --output-file=cppcheck-security.xml \
              --std=c++17 \
              --suppress=missingIncludeSystem \
              --suppress=unusedFunction \
              --checkers-report=cppcheck-checkers.txt \
              games/ || echo "cppcheck completed with findings"
            
            # Display findings for review
            if [ -f "cppcheck-security.xml" ]; then
              echo "Security scan results:"
              cat cppcheck-security.xml
            fi
          else
            echo "No games directory found - creating placeholder security scan results"
            echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?><results><cppcheck version=\"placeholder\"/></results>" > cppcheck-security.xml
          fi
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: gameserver-security-scan-results
          path: |
            cppcheck-security.xml
            cppcheck-checkers.txt
          if-no-files-found: ignore

  status-check:
    name: All Game Server Stub Checks Complete
    runs-on: ubuntu-latest
    needs: [lint-cpp, build-game-server-stubs, security-scan-cpp]
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ needs.lint-cpp.result }}" == "success" && \
                "${{ needs.build-game-server-stubs.result }}" == "success" && \
                "${{ needs.security-scan-cpp.result }}" == "success" ]]; then
            echo "All game server stub CI checks passed!"
            exit 0
          else
            echo "One or more game server stub CI checks failed!"
            echo "lint-cpp: ${{ needs.lint-cpp.result }}"
            echo "build-game-server-stubs: ${{ needs.build-game-server-stubs.result }}"
            echo "security-scan-cpp: ${{ needs.security-scan-cpp.result }}"
            exit 1
          fi