name: Container Registry Publishing

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["Netchain Backend CI"]
    types: [completed]
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/bunkerverse

jobs:
  publish-containers:
    name: Publish Service Containers
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        service: 
          - indexer
          - marketplace
          - identity
          - player_account
          - ai_data
          - account
          - feedback
          - mission
          - payment
          - social
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Optional: Setup AWS ECR if using AWS
      - name: Configure AWS credentials
        if: vars.USE_AWS_ECR == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      
      - name: Login to Amazon ECR
        if: vars.USE_AWS_ECR == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      # Extract metadata
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
            ${{ vars.USE_AWS_ECR == 'true' && format('{0}/{1}-{2}', steps.login-ecr.outputs.registry, 'bunkerverse', matrix.service) || '' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: services/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
      
      # Scan the published image with Trivy
      - name: Run Trivy vulnerability scanner on published image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-published-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-published-${{ matrix.service }}.sarif'
      
      # Sign the container image
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
      
      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing image ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}"
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}
      
      # Generate SBOM
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}
          artifact-name: sbom-${{ matrix.service }}.spdx.json
          output-file: sbom-${{ matrix.service }}.spdx.json
      
      - name: Attach SBOM to image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign attach sbom --sbom sbom-${{ matrix.service }}.spdx.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.sha }}

  publish-manifest:
    name: Publish Multi-arch Manifest
    runs-on: ubuntu-latest
    needs: publish-containers
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create and push manifest list
        run: |
          SERVICES=(indexer marketplace identity player_account ai_data account feedback mission payment social)
          for SERVICE in "${SERVICES[@]}"; do
            docker manifest create \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${SERVICE}:latest \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${SERVICE}:${{ github.sha }}-linux-amd64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${SERVICE}:${{ github.sha }}-linux-arm64
            
            docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${SERVICE}:latest
          done